<% provide(:title, t('title.shares.index')) %>

<% content_for :homelink do %>
  <a href="#" onClick="closeActivity()" id="ach_so_link" class="show-on-android">
    <%= image_tag("ic_launcher.png", alt: "Ach so!", width: 32, height: 32) %>
  </a>
  <%= link_to @videos.first do %>
    <i class="material-icons" style="color:white;" class="hide-on-android">&#xE5C4;</i>
  <% end %>
<% end %>

<% content_for :pagetitle do %>
  <%= t('.pagetitle', count: @videos.count) %>
<% end %>

<div class="mdl-grid">
  <div class="mdl-cell mdl-cell--12-col">
    <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="video-public">
      <input type="checkbox" id="video-public" class="mdl-checkbox__input"
       <%= @videos.any?(&:is_public) ? 'checked' : '' %>
      >
      <span class="mdl-checkbox__label"><%= t('.is_public', count: @videos.count) %> </span>
    </label>
  </div>
  <%# List of video names to share %>
  <div class="mdl-cell mdl-cell--12-col">
    <p>
      <% for video in @videos %>
      <%= video.title %></br>
      <% end %>
    </p>
  </div>

  <div class="mdl-cell mdl-cell--4-col">
    <% for share_group in @share_groups %>

      <%# Group share switch %>
      <label id="grouplabel<%= share_group.group.id %>"
          for="group<%= share_group.group.id %>"
          class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect">
        <%= check_box_tag "group#{ share_group.group.id }", 2, share_group.shareclass != :unshared,
              class:"mdl-checkbox__input" %>
        <span class="mdl-checkbox__label">
          <%= share_group.group.name %>
          <% if share_group.shareclass == :mixed %>
            <i class="mixed_warning"><%= t('.mixed_share_warning') %></i>
          <% end %>
        </span>
      </label>

      <div class="mdl-spacer"></div>
      <br/>

    <% end %>
  </div>

  <div class="mdl-cell mdl-cell--4-col">
    <div class="mdl-spinner mdl-js-spinner" id="sharing_spinner"></div>
  </div>

</div>

<script>

  var groups = document.querySelectorAll(".mdl-checkbox__input");
  var pending = { };
  var state = {
  <% for share_group in @share_groups %>
    '<%=j share_group.group.id.to_s %>': <%= (share_group.shareclass != :unshared) ? 'true' : 'false' %>,
  <% end %>
  };

  var http = getHTTP();
  refresh();


  $('#video-public').click(function(event) {
    var checkBox = $(this);
    var label = checkBox.parent();
    var isPublic = checkBox.is(':checked');
    checkBox.prop('disabled', true);
    http.putJson("shares/set_publicity", {isPublic: isPublic}, {
      success: function(xhr) {
        checkBox.prop('disabled', false);
        label.removeClass('is-disabled');
      },
      error: function(xhr) {
        <% if Rails.env.development? %>
          replaceContentWithXHR(xhr);
        <% end %>
        checkBox.prop('checked', !isPublic);
        label.toggleClass('is-checked', !isPublic);
        checkBox.prop('disabled', false);
        label.removeClass('is-disabled');
      }
    });
  });

  function createGroupClickCallback(group, label, id) {
    return function(e) {
      if (pending[id]) {
        return;
      }

      // Mixed does upload with this logic
      state[id] = !state[id];
      pending[id] = true;
      group.disabled = true;

      var success = function(xhr) {
        <% if Rails.env.development? %>
          console.log(xhr, id);
        <% end %>
        pending[id] = false;
        group.disabled = false;

        // @Workaround(mdl): MDL doesn't remove the is-disabled class
        // automatically for some reason, even though the documentation
        // implies that it should.
        label.classList.remove("is-disabled");

        // TODO: Figure out a response format for multiple share
        //shared[id] = JSON.parse(xhr.response).indexOf(id) >= 0;
        $('.mixed_warning').remove();
        refresh();
      };

      var error = function(xhr) {          
        <% if Rails.env.development? %>
            replaceContentWithXHR(xhr);
        <% end %>

        state[id] = !state[id];
        pending[id] = false;
        group.disabled = false;
        group.checked = state[id];
        group.dispatchEvent(new Event('change', { 'bubbles': true }));
        label.classList.remove("is-disabled");

        if (state[id]) {
          createToast("<%=j t('.share_error.unshare') %>");
        } else {
          createToast("<%=j t('.share_error.share') %>");
        }

        refresh();

        // HACK: Unauthorized means that our OAuth2 token has expired. The
        // controller will reauthenticate on load of this page.
        // See SharesController#index
        if (xhr.status == 401) {
          location.reload(true);
        }
      };

      var params = {
        success: success,
        error: error,
      }

      $('#sharing_spinner').addClass('is-active');
      if (state[id]) {
        http.postJson("", { 'group': id }, params);
      } else {
        http.deleteJson("shares/" + id, params);
      }

      refresh();
    };
  }

  for (var i = 0; i < groups.length; i++) {
    var group = groups[i];
    var id = group.id.substring(5);
    var label = document.getElementById("grouplabel" + id);

    pending[id] = false;

    group.addEventListener("click", createGroupClickCallback(group, label, id));
  }

  function refresh() {
    for (var i = 0; i < groups.length; i++) {
      var group = groups[i];
      var id = group.id.substring(5);

      var show_spinner = true;
      for (var k in pending) {
          if (pending[k]) show_spinner = false;
      }
      if (!show_spinner) $('#sharing_spinner').removeClass('is-active');
    }
  }

  refresh();

</script>

