
<%# ------- Temporary ------- %>

<% content_for :homelink do %>
    <i class="material-icons" style="color:white;font-size:2.1em;">&#xE8B6;</i>
<% end %>

<% content_for :pagetitle do %>
    <form method="get" style="padding: 0px">
        <input style="font-size: 1.0em;" name="q" type="text"
            placeholder="<%= t('.search_placeholder') %>"
            value="<%= @query %>">
    </form>
<% end %>

<%# ------- End ------- %>

<div class="mdl-grid">

<% for manifest in @manifests %>
    <div class="search-view-container mdl-card mdl-cell mdl-cell--8-col-tablet mdl-shadow--2dp">
        <a class="search-link" href="<%= video_path(manifest["id"]) %>">
          <canvas class="search-canvas search-invisible">
          </canvas>
          <div class="search-title">
              <%= manifest["title"] %>
          </div>
          <div class="search-subtitles search-invisible">
          </div>
        </a>
    </div>
<% end %>

</div>

<script>

function searchRegex(pattern) {
    var wordRe = pattern
        .replace(/\W+/g, '|')
        .replace(/^\|?/g, '(')
        .replace(/\|?$/g, ')');

    var patternRe = wordRe + '(\\W*' + wordRe + ')*';
    return new RegExp(patternRe, 'ig');
}

var query = '<%=j @query %>';
var queryRegex = searchRegex(query);

var manifests = [
<%= @manifests.map(&:to_json).join(",\n").html_safe %>
];

function getTimes(work, duration) {
    var manifest = work.extra.manifest;

    var bestScore = 0;
    var bestFrame = {
        time: duration / 2.0,
        extra: {
            focus: { x: 0.5, y: 0.5 },
        }
    };

    for (var i = 0; i < manifest.annotations.length; i++) {
        var annotation = manifest.annotations[i];

        if (!annotation.text.match(queryRegex))
            continue;

        var replaced = annotation.text.replace(queryRegex, '');
        var score = annotation.text.length - replaced.length;

        if (score > bestScore) {
            bestScore = score;
            bestFrame = {
                time: annotation.time / 1000.0,
                annotations: [annotation],
                extra: {
                    focus: annotation.position,
                    text: annotation.text,
                },
            };
        }
    }

    return [bestFrame];
}

function highlightMatches(text) {
    return text.replace(queryRegex, '<span class="search-subtitles-marked">$&</span>');
}

function showElements(work, frame) {
    frame.canvas.classList.remove('search-invisible');


    if (frame.annotations) {
        frame.canvas.parentElement.href += "#t=" + frame.time.toFixed(2) + "s";
    }

    if (frame.extra.text) {
        var text = highlightMatches(frame.extra.text);
        work.extra.subtitles.innerHTML = text;
        work.extra.subtitles.classList.remove('search-invisible');
    }

    var doLayout = fillParent.bind(window, frame.canvas, frame.extra.focus, { });
    doLayout();
    window.setInterval(doLayout, 500);
}


var titles = document.querySelectorAll('.search-title');
for (var i = 0; i < titles.length; i++) {
    var title = titles[i];
    title.innerHTML = highlightMatches(title.innerHTML);
}

function documentLoaded() {
    var elements = document.querySelectorAll('.search-view-container');
    var frameRenderQueue = new WorkQueue();

    var workerCount = 4;
    for (var i = 0; i < workerCount; i++) {
        frameRenderQueue.addWorker(new VideoFrameRenderer());
    }

    for (var i = 0; i < manifests.length; i++) {
        frameRenderQueue.addWork({
            canvas: elements[i].querySelector('.search-canvas'),
            video: manifests[i].videoUri,
            resolution: 600,
            timesCallback: getTimes,
            doneCallback: showElements,
            extra: {
                manifest: manifests[i],
                subtitles: elements[i].querySelector('.search-subtitles'),
            }
        });
    }
}


// Complete the page load before starting to load the frames
window.addEventListener('load', documentLoaded);

</script>

