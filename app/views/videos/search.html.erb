
<style>
.search-result-container {
    height: 300px;
    overflow-x: hidden;
    overflow-y: hidden;
    white-space: nowrap;
}

.search-view-container {
    position: relative;
    width: 480px;
    height: 300px;
    margin-right: 4px;
    display: inline-block;
    background-color: #000;
}

.search-canvas {
    transition: opacity 0.2s ease-out;
    position: absolute;
    background-color: #fff;
}

.search-subtitles {
    transition: opacity 0.2s ease-out;
    color: #fff;
    position: absolute;
    bottom: 5px;
    left: 0px;
    width: 100%;
    font-family: sans-serif;
    font-size: 1em;
    text-align: center;
    pointer-events: none;
    transition: opacity 0.2s ease-out;
    text-shadow: 0px 0px 3px #000;
    line-height: 115%;
}

.search-invisible {
    opacity: 0.0;
}

.search-subtitles-marked {
    color: #65FFBD;
}

</style>

<% for manifest in @manifests %>
    <h4><%= link_to(manifest["title"], videos_path(manifest["id"])) %></h4>
    <div class="search-result-container">
    </div>
<% end %>

<script>

function createAnnotationGradient(ctx) {
    var g = ctx.createRadialGradient(25, 25, 0, 25, 25, 25);

    g.addColorStop(0.37, 'rgba(255,255,255, 0.0)');
    g.addColorStop(0.40, 'rgba(255,255,255, 0.9)');
    g.addColorStop(0.45, 'rgba(255,255,255, 0.9)');
    g.addColorStop(0.47, 'rgba(68,153,136, 0.8)');
    g.addColorStop(0.53, 'rgba(68,153,136, 0.4)');
    g.addColorStop(0.55, 'rgba(68,153,136, 0.0)');
    g.addColorStop(0.56, 'rgba(68,153,136, 0.0)');
    g.addColorStop(0.60, 'rgba(85,204,153, 0.9)');
    g.addColorStop(0.62, 'rgba(85,204,153, 0.9)');
    g.addColorStop(0.66, 'rgba(85,204,153, 0.0)');

    return g;
}

function findAnnotationMatches(manifest, query, duration) {

    var times = [];
    var hits = [];

    for (var i = 0; i < manifest.annotations.length; i++) {
      var annotation = manifest.annotations[i];
      var time = annotation.time / 1000.0;

      times.push(time);

      if (annotation.text.toLowerCase().indexOf(query.toLowerCase()) < 0)
        continue;

      hits.push(time);
    }

    var filler = [];
    var fillerCount = 6;

    for (var i = 0; i < fillerCount; i++) {
        filler.push(duration * ((i + 0.5) / fillerCount));
    }

    var allTimes = hits.concat(times).concat(filler);
    var toShow = [];

    for (var i = 0; i < allTimes.length; i++) {
        var time = allTimes[i];

        var includedAlready = false;
        for (var j = 0; j < toShow.length; j++) {
            if (Math.abs(toShow[j] - time) < 0.1) {
                includedAlready = true;
                break;
            }
        }

        if (includedAlready)
            continue;

        toShow.push(time);
    }

    return toShow;
}

var query = '<%=j @query %>';
var manifests = [
<%= @manifests.map(&:to_json).join(",\n").html_safe %>
];

var elements = document.querySelectorAll('.search-result-container');

var frameRenderQueue = new WorkQueue();

var workerCount = 4;
var workerOptions = {
    width: 480,
    height: 300,
};
for (var i = 0; i < workerCount; i++) {
    frameRenderQueue.addWorker(new VideoFrameRenderer(workerOptions));
}

for (var i = 0; i < manifests.length; i++) {

    var element = elements[i];
    var containers = [];

    for (var j = 0; j < 3; j++) {
        var link = document.createElement("a");

        var container = document.createElement("div");
        container.classList.add("search-view-container");
        containers.push(container);

        link.appendChild(container);
        element.appendChild(link);
    }

    frameRenderQueue.addWork({
        start: 0,
        count: containers.length,
        containers: containers,
        manifest: manifests[i],
    });
}


</script>

