<% provide(:title, t('title.videos.show', name: @video.title)) %>

<% content_for :homelink do %>
  <a href="#" onClick="closeActivity()" id="ach_so_link">
   <%= image_tag("ic_launcher.png", alt: "Ach so!", width: 32, height: 32) %>
  </a>
<% end %>

<% content_for :pagetitle do %>
    <%= @video.title %>
<% end %>

<div class="mdl-grid">

  <%# Video player %>
  <div class="mdl-cell mdl-cell--8-col">
    <div class="acp-player acp-inline acp-noselect" id="achso_player">
      <div class="acp-video-background">
        <div class="acp-video-wrapper">
          <video class="acp-video">
          </video>
        </div>
        <div class="acp-annotation-edit">
          <input class="acp-annotation-text-input" type="text" />
          <button class="acp-annotation-delete-button"><%= t('player.annotation_edit.delete') %></button>
          <button class="acp-annotation-save-button"><%= t('player.annotation_edit.save') %></button>
        </div>
        <div class="acp-subtitles">
        </div>
      </div>
      <div class="acp-controls">
        <i class="material-icons acp-control-button acp-play-button acp-disabled">&#xE037;</i>
        <div class="acp-seek-bar">
          <div class="acp-seek-bar-filler">
            <div class="acp-seek-bar-ball">
            </div>
          </div>
          <div class="acp-seek-catcher">
          </div>
        </div>
        <div class="acp-end-space">
        </div>
        <% if current_user and policy(@video).update? %>
          <i class="material-icons acp-control-button acp-undo-button acp-disabled">&#xE166;</i>
          <i class="material-icons acp-control-button acp-redo-button acp-disabled">&#xE15A;</i>
        <% else %>
          <i class="material-icons acp-control-button acp-undo-button acp-force-hidden-no-layout">&#xE166;</i>
          <i class="material-icons acp-control-button acp-redo-button acp-force-hidden-no-layout">&#xE15A;</i>
        <% end %>
        <i class="material-icons acp-control-button acp-fullscreen-button acp-disabled">&#xE5D0;</i>
        <div class="acp-end-space">
        </div>
        <div class="acp-wait-bar">
        </div>
        <div class="acp-wait-fade">
        </div>
      </div>
    </div>
  </div>

  <div class="mdl-cell mdl-cell--4-col mdl-cell--8-col-tablet">

    <div id="save_spinner" class="mdl-spinner mdl-spinner--single-color mdl-js-spinner"></div>

    <%# Update button %>
    <% if policy(@video).update? %>
      <div onclick='saveChanges()' class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
        <%= t('.save.button') %>
      </div>
    <% end %>

    <%# Share button %>
    <% if policy(@video).share? %>
      <%= link_to(t('.share_button'), shares_path(@video),
            class: "mdl-button mdl-js-button mdl-button--raised mdl-button--colored") %>
    <% end %>

    <%# Edit button %>
    <% if policy(@video).edit? %>
      <%= link_to(t('.edit_button'), edit_video_path(@video),
            class: "mdl-button mdl-js-button mdl-button--raised mdl-button--colored") %>
    <% end %>

    <%# Revisions button %>
    <% if policy(@video).revisions? %>
      <%= link_to(t('.revisions_button'), revisions_video_path(@video),
            class: "mdl-button mdl-js-button mdl-button--raised mdl-button--colored") %>
    <% end %>

    <%# Delete button %>
    <% if policy(@video).destroy? %>

      <%# Delete button with confirmation if javascript is enabled, otherwise just DELETE link %>
      <noscript>
        <%= link_to(t('.delete.button'), video_path(@video), method: :delete,
              class: "mdl-button mdl-js-button mdl-button--raised mdl-button--accent") %>
      </noscript>

      <%= button_tag(t('.delete.button'), id: :delete_button,
            class: "mdl-button mdl-js-button mdl-button--raised mdl-button--accent force-hidden-no-layout") %>

      <script>
        // @Copy-Paste(confirm delete button)
        var $delete_button = $("#delete_button");
        $delete_button.removeClass("force-hidden-no-layout")
        $delete_button.on("click", function() {
          // TODO: Material design dialog?
          // MDL didn't offer a solution when this was written
          if (confirm("<%=j t('.delete.confirm') %>")) {
            getHTTP().deleteJson('', {
              success: function() {
                window.location.href = '<%=j videos_path() %>';
              },
              error: function() {
                createToast("<%j= t('.delete.error') %>");
              }
            })
          }
        });
      </script>
    <% end %>

    <%# Embed codes %>
    <h4><%= t('.share_link', name: @video.author.name) %></h4>
    <div class="mdl-tabs mdl-js-tabs mdl-js-ripple-effect share-link-wrapper">
      <div class="mdl-tabs__tab-bar">
        <a href="#tab-link" class="mdl-tabs__tab">Link</a>
        <a href="#tab-wordpress" class="mdl-tabs__tab">WordPress</a>
        <a href="#tab-html" class="mdl-tabs__tab">HTML</a>
      </div>

      <div  class="mdl-tabs__panel is-active" id="tab-link">
        <input class="mdl-textfield__input" id="share_link" type="text" onclick="this.focus();this.select();" readonly>
      </div>

      <div class="mdl-tabs__panel" id="tab-wordpress">
        <input class="mdl-textfield__input" id="share_wordpress" type="text" onclick="this.focus();this.select();" readonly>
      </div>

      <div class="mdl-tabs__panel" id="tab-html">
        <input class="mdl-textfield__input" id="share_html" type="text" onclick="this.focus();this.select();" readonly>
      </div>
    </div>

    <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="share_at_time">
      <input type="checkbox" id="share_at_time" class="mdl-checkbox__input">
      <span class="mdl-checkbox__label" id="share_at_time_label">Checkbox</span>
    </label>
  </div>
</div>

<script>

  <% if current_user and policy(@video).update? %>
    var user = <%= current_user.manifest_json.to_json.html_safe %>;
  <% else %>
    var user = null;
  <% end %>

  var startTime = 0;
  if (window.location.hash) {
    var format = /t=(\d+(.\d+)?)s/;
    var match = format.exec(window.location.hash);
    if (match && match[1]) {
      startTime = parseFloat(match[1]);
    }
  }

  var manifest = <%= @video.read_manifest.to_json.html_safe %>;
  normalizeManifest(manifest);

  var lastSavedManifest = manifest;

  var playerElement = document.querySelector("#achso_player");
  var player = new AchSoPlayer(playerElement, manifest, user, {
    startTime: startTime
  });

  var saveSpinner = document.querySelector("#save_spinner");

  var token = $('meta[name=csrf-token]').attr('content');
  var http = new HTTP();
  http.globalHeader("X-CSRF-Token", token);

  var isSaving = false;

  function saveBegin() {
    if (isSaving)
      return false;
    isSaving = true;
    save_spinner.classList.add("is-active");
    return true;
  }

  function saveEnd() {
    save_spinner.classList.remove("is-active");
    isSaving = false;
  }

  function saveChanges() {
    var manifest = player.exportManifest();
    if (!saveBegin()) {
      return;
    }

    http.putJson('', manifest, {
      success: function(xhr) {
        createToast("<%=j t('.save.success') %>");
        var newManifest = JSON.parse(xhr.responseText);
        player.reset(newManifest);
        lastSavedManifest = newManifest;
        saveEnd();
      },

      error: function(xhr) {
        <% if Rails.env.development? %>
          replaceContentWithXHR(xhr);
        <% else %>
          createToast("<%=j t('.save.error') %>");
        <% end %>
        saveEnd();
      },
    });
  }

  var baseUrl = "<%=j player_video_url(@video) %>";

  var prevUrl = null;
  function updateCopyBoxes(url) {
    if (prevUrl == url)
      return;
    prevUrl = url;

    var templates = {
      link: '$URL',
      wordpress: '[iframe src="$URL" width="$WIDTH" height="$HEIGHT" allowfullscreen=""]',
      html: '<iframe src="$URL" width="$WIDTH" height="$HEIGHT" allowfullscreen></iframe>',
    };

    for (var type in templates) {
      var template = templates[type];
      var inputBox = document.querySelector("#share_" + type);

      inputBox.value = (template
        .replace("$URL", url)
        .replace("$WIDTH", "800")
        .replace("$HEIGHT", "600"));
    }
  }

  var shareTimeCheckbox = document.querySelector("#share_at_time");
  var shareTimeLabel = document.querySelector("#share_at_time_label");

  function updateShareTimer() {
    var time = player.time || 0.0;
    var minutes = Math.floor(time / 60.0);
    var seconds = Math.floor(time % 60.0);
    var timeText = minutes + ":";
    if (seconds < 10) {
      timeText += "0" + seconds;
    } else {
      timeText += seconds;
    }

    shareTimeLabel.innerHTML = "<%=j t('.start_at_label') %> " + timeText;

    if (shareTimeCheckbox.checked) {
      updateCopyBoxes(baseUrl + "#t=" + time.toFixed(2) + "s");
    } else {
      updateCopyBoxes(baseUrl);
    }
  }
  updateShareTimer();

  window.setInterval(updateShareTimer, 200);

  updateCopyBoxes(baseUrl);

  window.addEventListener("beforeunload", function(e) {

    if (!user) {
      return undefined;
    }

    var newManifest = player.exportManifest();
    if (_.isEqual(newManifest, lastSavedManifest)) {
      return undefined;
    }

    var message = "<%=j t('.unsaved_video_warning') %>";

    e.returnValue = message;
    return message;
  });

</script>
